#!/bin/bash

# deploy_flutter_web.sh - Build v√† deploy Flutter Web l√™n server (n√©n/gi·∫£i n√©n)
# Ch·∫°y tr√™n Mac, t·ª´ th∆∞ m·ª•c root d·ª± √°n Flutter
# Y√™u c·∫ßu: Flutter, SSH key cho root@46.28.69.11, Docker Compose tr√™n server

set -e

echo "=== DEPLOY FLUTTER WEB TO SERVER (N√âN/GI·∫¢I N√âN) ==="

# C·∫•u h√¨nh server
SERVER_IP="46.28.69.11"
SERVER_USER="root"
SERVER_PATH="/home/web/build"
DOMAIN="eu.way4.app"
TEMP_TAR="/tmp/flutter_web_build.tar.gz"
COMPOSE_FILE="/home/n8n/docker-compose.yml"
CADDYFILE="/home/n8n/Caddyfile"

# Ki·ªÉm tra k·∫øt n·ªëi SSH
echo "üîç Ki·ªÉm tra k·∫øt n·ªëi SSH t·ªõi $SERVER_USER@$SERVER_IP..."
if ! ssh -o ConnectTimeout=5 "$SERVER_USER@$SERVER_IP" "echo 'SSH OK'" >/dev/null 2>&1; then
    echo "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi SSH t·ªõi $SERVER_USER@$SERVER_IP."
    echo "üëâ Ki·ªÉm tra SSH key: ssh-copy-id $SERVER_USER@$SERVER_IP"
    echo "üëâ X√≥a host key c≈© n·∫øu c·∫ßn: ssh-keygen -R $SERVER_IP"
    exit 1
fi

# Ki·ªÉm tra DNS
echo "üîç Ki·ªÉm tra DNS cho $DOMAIN..."
SERVER_IP_CHECK=$(dig +short "$DOMAIN" | head -n1)
if [[ -z "$SERVER_IP_CHECK" || "$SERVER_IP_CHECK" != "$SERVER_IP" ]]; then
    echo "‚ö†Ô∏è DNS cho $DOMAIN kh√¥ng tr·ªè t·ªõi $SERVER_IP (hi·ªán t·∫°i: $SERVER_IP_CHECK)."
    echo "üëâ C·∫≠p nh·∫≠t A record trong panel qu·∫£n l√Ω DNS."
fi

# Ki·ªÉm tra build
if [[ ! -d "build/web" ]]; then
    echo "‚ùå Build th·∫•t b·∫°i. Ki·ªÉm tra l·ªói Flutter."
    exit 1
fi

# N√©n th∆∞ m·ª•c build/web
echo "üì¶ N√©n build/web th√†nh $TEMP_TAR..."
rm -f "$TEMP_TAR"  # X√≥a file n√©n c≈© n·∫øu c√≥
tar -czf "$TEMP_TAR" -C build/web .

# Upload file n√©n
echo "üì§ Upload $TEMP_TAR l√™n $SERVER_USER@$SERVER_IP:/tmp..."
scp "$TEMP_TAR" "$SERVER_USER@$SERVER_IP:/tmp/"

# SSH ƒë·ªÉ x·ª≠ l√Ω tr√™n server
echo "üîß Gi·∫£i n√©n, s·ª≠a quy·ªÅn, v√† reload Caddy tr√™n server..."
ssh "$SERVER_USER@$SERVER_IP" "
    # Backup th∆∞ m·ª•c hi·ªán t·∫°i
    if [ -d \"$SERVER_PATH\" ]; then
        echo 'Sao l∆∞u $SERVER_PATH...'
        cp -r \"$SERVER_PATH\" \"/home/web/build.bak_\$(date +%s)\"
    fi

    # T·∫°o th∆∞ m·ª•c v√† gi·∫£i n√©n
    mkdir -p \"$SERVER_PATH\" &&
    rm -rf \"$SERVER_PATH\"/* &&
    tar -xzf /tmp/flutter_web_build.tar.gz -C \"$SERVER_PATH\"/ &&
    rm /tmp/flutter_web_build.tar.gz &&

    # S·ª≠a quy·ªÅn cho container Caddy
    chown -R 1000:1000 \"$SERVER_PATH\" &&
    chmod -R 755 \"$SERVER_PATH\" &&

    # Ki·ªÉm tra v√† th√™m volume v√†o docker-compose.yml
    if ! grep -q \"$SERVER_PATH:/home/web/build\" \"$COMPOSE_FILE\"; then
        echo 'Th√™m volume $SERVER_PATH v√†o $COMPOSE_FILE...'
        sed -i '/caddy:/,/networks:/ s|volumes:|volumes:\\n      - $SERVER_PATH:/home/web/build|' \"$COMPOSE_FILE\"
    fi &&

    # Format Caddyfile ƒë·ªÉ lo·∫°i b·ªè c·∫£nh b√°o
    if [ -f \"$CADDYFILE\" ]; then
        docker run --rm -v \"$CADDYFILE\":/Caddyfile caddy:2 caddy fmt --overwrite /Caddyfile
    fi &&

    # Restart Caddy qua Docker Compose
    cd /home/n8n &&
    docker-compose up -d
"

if [[ $? -ne 0 ]]; then
    echo "‚ö†Ô∏è L·ªói x·ª≠ l√Ω tr√™n server. Ki·ªÉm tra log Caddy: ssh $SERVER_USER@$SERVER_IP 'docker logs n8n-caddy-1'"
    exit 1
fi

# X√≥a file n√©n t·∫°m tr√™n local
rm -f "$TEMP_TAR"

echo "‚úÖ Deploy ho√†n t·∫•t!"
echo "üëâ Web s·∫µn s√†ng t·∫°i: https://$DOMAIN"
echo "üìú Ki·ªÉm tra log Caddy: ssh $SERVER_USER@$SERVER_IP 'docker logs n8n-caddy-1'"
echo "‚ö†Ô∏è N·∫øu l·ªói, ki·ªÉm tra DNS ho·∫∑c th·ª≠: curl -k http://localhost:80 -H \"Host: $DOMAIN\" (tr√™n server)"