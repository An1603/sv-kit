#!/bin/bash
set -e

echo "=== SETUP N8N V√Ä WEB V·ªöI CADDY (KH√îNG XUNG ƒê·ªòT) ==="

# Ki·ªÉm tra quy·ªÅn root
if [[ $EUID -ne 0 ]]; then
    echo "Script n√†y ph·∫£i ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root."
    exit 1
fi

# Nh·∫≠p email cho SSL (t√πy ch·ªçn)
read -rp "Nh·∫≠p email admin cho SSL (ƒë·ªÉ tr·ªëng ƒë·ªÉ d√πng Let‚Äôs Encrypt t·ª± ƒë·ªông): " ADMIN_EMAIL
if [[ -z "$ADMIN_EMAIL" ]]; then
    echo "Kh√¥ng cung c·∫•p email, s·ª≠ d·ª•ng Let‚Äôs Encrypt t·ª± ƒë·ªông."
else
    echo "S·ª≠ d·ª•ng email: $ADMIN_EMAIL"
fi

# Ki·ªÉm tra DNS
SERVER_IP=$(curl -s https://api.ipify.org)
for DOMAIN in n8n.way4.app eu.way4.app; do
    DOMAIN_IP=$(dig +short "$DOMAIN" | tail -n 1)
    if [[ -z "$DOMAIN_IP" || "$SERVER_IP" != "$DOMAIN_IP" ]]; then
        echo "Domain $DOMAIN kh√¥ng tr·ªè v·ªÅ IP server $SERVER_IP (IP nh·∫≠n ƒë∆∞·ª£c: $DOMAIN_IP)."
        echo "Vui l√≤ng c·∫≠p nh·∫≠t DNS v√† th·ª≠ l·∫°i."
        exit 1
    fi
done

# Ki·ªÉm tra c·ªïng 80/443
if ss -tuln | grep -q ':80\|:443'; then
    echo "C·ªïng 80 ho·∫∑c 443 ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng. D·ª´ng d·ªãch v·ª• xung ƒë·ªôt:"
    sudo lsof -i :80
    sudo lsof -i :443
    echo "D·ª´ng b·∫±ng: sudo kill -9 <PID> ho·∫∑c sudo systemctl stop <d·ªãch_v·ª•>"
    exit 1
fi

# C·∫≠p nh·∫≠t h·ªá th·ªëng v√† x·ª≠ l√Ω xung ƒë·ªôt g√≥i
echo "üì¶ C·∫≠p nh·∫≠t h·ªá th·ªëng v√† x·ª≠ l√Ω xung ƒë·ªôt g√≥i..."
apt update
apt upgrade -y
apt autoremove -y
apt install -f

# X√≥a containerd c≈© ƒë·ªÉ tr√°nh xung ƒë·ªôt
if dpkg -l | grep -q containerd; then
    echo "X√≥a containerd c≈©..."
    apt remove -y containerd
    apt autoremove -y
fi

# B·ªè gi·ªØ g√≥i n·∫øu c√≥
if dpkg --get-selections | grep -q hold; then
    echo "B·ªè gi·ªØ c√°c g√≥i b·ªã hold..."
    dpkg --get-selections | grep hold | awk '{print $1}' | xargs -r apt-mark unhold
fi

# C√†i Docker n·∫øu ch∆∞a c√≥
if ! command -v docker >/dev/null 2>&1; then
    echo "üê≥ C√†i Docker..."
    apt install -y docker.io docker-compose
    systemctl enable docker --now
fi

# C√†i Caddy n·∫øu ch∆∞a c√≥
if ! command -v caddy >/dev/null 2>&1; then
    echo "üõ° C√†i Caddy..."
    apt install -y debian-keyring debian-archive-keyring apt-transport-https
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
    apt update
    apt install -y caddy
fi

# Setup n8n v·ªõi Docker Compose (c·ªïng n·ªôi b·ªô 5678)
echo "üöÄ Setup n8n tr√™n localhost:5678..."
mkdir -p /opt/n8n
cat > /opt/n8n/docker-compose.yml <<EOL
version: '3.8'
services:
  n8n:
    image: n8nio/n8n:latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=$(openssl rand -base64 12)
      - N8N_HOST=n8n.way4.app
      - N8N_PROTOCOL=https
    volumes:
      - n8n_data:/home/node/.n8n
volumes:
  n8n_data:
EOL

docker-compose -f /opt/n8n/docker-compose.yml up -d

# T·∫°o th∆∞ m·ª•c web (cho eu.way4.app, placeholder)
echo "üìÇ T·∫°o th∆∞ m·ª•c web cho eu.way4.app..."
mkdir -p /opt/web/build
cat > /opt/web/build/index.html <<EOF
<!DOCTYPE html>
<html>
<head><title>Web App</title></head>
<body><h1>Ch√†o m·ª´ng ƒë·∫øn eu.way4.app!</h1><p>Deploy web c·ªßa b·∫°n v√†o ƒë√¢y.</p></body>
</html>
EOF
chown -R caddy:caddy /opt/web
chmod -R 755 /opt/web

# Sao l∆∞u Caddyfile
CADDYFILE="/etc/caddy/Caddyfile"
if [[ -f "$CADDYFILE" ]]; then
    cp "$CADDYFILE" "${CADDYFILE}.bak_$(date +%s)"
fi

# T·∫°o Caddyfile ƒë√∫ng c√∫ ph√°p
echo "T·∫°o Caddyfile..."
cat > "$CADDYFILE" <<EOF
# n8n tr√™n subdomain
n8n.way4.app {
    reverse_proxy localhost:5678
    encode gzip
    $( [[ -n "$ADMIN_EMAIL" ]] && echo "tls $ADMIN_EMAIL" || echo "tls" )
}

# Web tƒ©nh tr√™n subdomain
eu.way4.app {
    root * /opt/web/build
    file_server
    encode gzip
    $( [[ -n "$ADMIN_EMAIL" ]] && echo "tls $ADMIN_EMAIL" || echo "tls" )
}
EOF

# S·ª≠a quy·ªÅn Caddyfile
chown caddy:caddy "$CADDYFILE"
chmod 644 "$CADDYFILE"
chown -R caddy:caddy /etc/caddy
chmod 755 /etc/caddy

# X√°c th·ª±c v√† ch·∫°y Caddy
if ! caddy validate --config "$CADDYFILE"; then
    echo "‚ùå C·∫•u h√¨nh Caddy l·ªói. Kh√¥i ph·ª•c backup..."
    mv "${CADDYFILE}.bak_*" "$CADDYFILE" 2>/dev/null || true
    exit 1
fi

systemctl enable caddy --now
systemctl reload caddy || { echo "‚ùå L·ªói Caddy. Ki·ªÉm tra: journalctl -xeu caddy.service"; exit 1; }

# Hi·ªÉn th·ªã m·∫≠t kh·∫©u n8n
N8N_PASS=$(grep N8N_BASIC_AUTH_PASSWORD /opt/n8n/docker-compose.yml | cut -d'=' -f2-)
echo "‚úÖ Ho√†n t·∫•t!"
echo "üëâ n8n: https://n8n.way4.app (User: admin, Pass: $N8N_PASS)"
echo "üëâ Web: https://eu.way4.app"
echo "üìú Log Caddy: journalctl -xeu caddy.service"
echo "‚ö†Ô∏è Deploy web: cp -r build/web/* /opt/web/build/ && chown -R caddy:caddy /opt/web && systemctl reload caddy"